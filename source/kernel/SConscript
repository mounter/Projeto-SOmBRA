# coding: utf-8
#
# Copyright (C) 2015 Gil Mendes <gil00mendes@gmail.com>
#

Import('config', 'manager', 'version')
from util import FeatureSources

sources = FeatureSources(config, [
    'init.c'
])

##########################################
# Configuração do Ambiente de Construção #
##########################################

# Cria o ambiente para o Kernel
env = manager.CreateBare(name = 'kernel', flags = {
    'LIBS': [],
    'CPPPATH': [
        Dir('include'),
        Dir('arch/%s/include' % (config['ARCH'])),
        Dir('platform/%s/include' % (config['PLATFORM'])),
    ],
    'CCFLAGS': [
        '-nostdlib', '-nostdinc', '-ffreestanding',
        '-fno-optimize-sibling-calls', '-fno-stack-protector',
        '-include', 'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM']),
    ],
    'CXXFLAGS': [
        '-fno-exceptions', '-fno-rtti',
    ],
    'ASFLAGS': [
        '-nostdinc', '-include',
        'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM']),
    ],
    'LINKFLAGS': [
        '-nostdlib',
    ],
    'CPPDEFINES': {
        '__KERNEL': None,
        '__KERNEL_PRIVATE': None,
    },
})

# Adiciona o diretorio include do compilador para a inclusão de alguns headers standard
from subprocess import Popen, PIPE
incdir = Popen([env['CC'], '-print-file-name=include'], stdout = PIPE).communicate()[0].strip()
env['CCFLAGS'] += ['-isystem', incdir]
env['ASFLAGS'] += ['-isystem', incdir]

# Gera um ficheiro com as informações da versão
def gen_version_c(target, source, env):
    f = open(str(target[0]), 'w')
    f.write('int kernel_ver_release = %d;\n' % (version['VER_RELEASE']))
    f.write('int kernel_ver_update = %d;\n' % (version['VER_UPDATE']))
    f.write('int kernel_ver_revision = %d;\n' % (version['VER_REVISION']))
    f.write('const char *kernel_ver_string = "%s";\n' % (version['VER_STRING']))
    f.close()
AlwaysBuild(env.Command('version.c', [], env.Action(gen_version_c, None)))

# Obtme a lista de ficheiros a serem compilados na pasta da arquitetura e da plataforma
arch_sources = SConscript(dirs = ['arch/' + config['ARCH']], exports = ['env'])
platform_sources = SConscript(dirs = ['platform/' + config['PLATFORM']], exports = ['env'])
sources = arch_sources + platform_sources + sources

# Faz o link da imagem do kernel
env.Program('kernel-unstripped', map(env.Object, sources),
    LINKFLAGS = env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT'])
Depends('kernel-unstripped', env['LDSCRIPT'])

# Gera varios ficheiros de informação e uma imagem stripped do kernel
env.Command(['kernel', 'kernel.lst', 'kernel.rde', 'kernel.sym'], 'kernel-unstripped', [
    Action('$STRIP --strip-debug $SOURCE -o ${TARGETS[0]}', '$GENCOMSTR'),
    Action('$OBJDUMP -d $SOURCE > ${TARGETS[1]}', None),
    Action('$READELF -aW $SOURCE > ${TARGETS[2]}', None),
    Action('$NM -C $SOURCE | sort > ${TARGETS[3]}', None),
])

# informa o ambiente de destribuição da localização do kernel
manager['dist']['KERNEL'] = File('kernel')